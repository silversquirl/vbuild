#!/bin/sh

# This is an example build.sh showing how to use vbuild to build a simple "hello world" program
# The binary is built from hello.c, which is automatically generated by a vbuild rule

# Copyright 2019 Samadi van Koten
#
# Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

. ./vbuild.sh

# Set some flags
CFLAGS='-std=c99 -pedantic -Wall -Werror'
LDFLAGS=

# Some nice helpers
cc() {
	# Note that CFLAGS and deps are not quoted so word splitting can occur
	echo "[CC]	$target"
	command "$CC" $CFLAGS -c -o "$target" $deps
}
ld() {
	# Note that LDFLAGS and deps are not quoted so word splitting can occur
	echo "[LD]	$target"
	command "$CC" -o "$target" $deps $LDFLAGS
}
rm() {
	for file; do
		echo "[RM]	$file"
		command rm -f "$file"
	done
}

# Our first rule builds the final binary
#
# A build rule consists of 3 parts: the target, the condition and the command
# The target is a space-separated list of filename patterns that can be generated by the command
# The condition is run before the command, and its return code is checked to determine whether the command should run
# If the condition passes, the command is run
#
# In this case, the condition is `dep`. This command will attempt to rebuild all of the specified dependencies and will return 0 if the target needs rebuilt. It will also set the $deps variable to contain the specified dependencies in a space-separated list.
build "hello$EXE" 'dep hello.o' ld

# This rule compiles .c files to .o files
build '*.o' 'dep "${target%.o}.c"' cc

# This rule generates a hello world program
hello_gen() {
	echo "[GEN]	$target"
	cat >"$target" <<-'EOF'
	#include <stdio.h>
	int main() {
		puts("Hello, world!");
		return 0;
	}
	EOF
}
build hello.c '! [ -e "$target" ]' hello_gen

# This function cleans up all the built files
clean() {
	rm hello.c *.o hello
}

# How you handle command line arguments is up to you. In this case, they're handled as options
for opt; do
	case "$opt" in
		clean) clean; exit;;
		--win) CROSS_TRIPLE=x86_64-mingw32-w64; EXE=.exe;;
		--static) LDFLAGS+=\ -static;;
	esac
done

# The `vbuild` command builds all the files it is given as arguments
vbuild "hello$EXE"
